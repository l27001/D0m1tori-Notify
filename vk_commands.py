import re, json
from config import vk_info
from methods import check_stream

class Commands:

    def __init__(self, response):
        if(response['type'] not in ['message_new', 'group_leave']):
            return None
        if(response['type'] == 'group_leave'):
            if(Vk.is_message_allowed(response['object']['user_id']) == 1):
                Vk.send(response['object']['user_id'], "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã –ø–æ–∫–∏–¥–∞–µ—à—å –Ω–∞—Å :(")
            return None
        self.from_user = response['object']['message']['from_id']
        self.from_chat = response['object']['message']['peer_id']
        self.inline = Vk.check_keyboard(response['object']['client_info']['inline_keyboard'])
        if(self.from_chat >= 2000000000):
            self.is_chat = True
            self.chat_sub = Mysql.query("SELECT * FROM vk_subscribe WHERE id = %s", (self.from_chat,))
            if(self.chat_sub == None):
                Mysql.query("INSERT INTO vk_subscribe (id) VALUES (%s)", (self.from_chat,))
                self.chat_sub = Mysql.query("SELECT * FROM vk_subscribe WHERE id = %s", (self.from_chat,))
        else:
            self.is_chat = False
            self.chat_sub = None
        self.user_sub = Mysql.query("SELECT * FROM vk_subscribe WHERE id = %s", (self.from_user,))
        if(self.user_sub == None):
            Mysql.query("INSERT INTO vk_subscribe (id) VALUES (%s)", (self.from_user,))
            self.user_sub = Mysql.query("SELECT * FROM vk_subscribe WHERE id = %s", (self.from_user,))
        if('payload' in response['object']['message']): # –∏–Ω—Ç–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            try:
                response['object']['message']['payload'] = json.loads(response['object']['message']['payload'])
                if('command' in response['object']['message']['payload'] and response['object']['message']['payload']['command'] == "internal_command"):
                    if(response['object']['message']['payload']['action']['type'] == "intent_unsubscribe"):
                        Mysql.query("UPDATE vk_subscribe SET subscribe = 0 WHERE id = %s", (self.from_user))
                        Vk.send(self.from_user, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/—Ä–∞—Å—Å—ã–ª–∫–∞'", keyboard=Vk.construct_keyboard(b1=Vk.make_button(type_="intent_subscribe",peer_id=self.from_user,intent="non_promo_newsletter",label="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),inline=self.inline))
                    elif(response['object']['message']['payload']['action']['type'] == "intent_subscribe"):
                        Mysql.query("UPDATE vk_subscribe SET subscribe = 1 WHERE id = %s", (self.from_user))
                        Vk.send(self.from_user, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö.\n–î–ª—è –æ—Ç–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/—Ä–∞—Å—Å—ã–ª–∫–∞'", keyboard=Vk.construct_keyboard(b2=Vk.make_button(type_="intent_unsubscribe",peer_id=self.from_user,intent="non_promo_newsletter",label="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"),inline=self.inline))
                    return None
            except TypeError: pass # –µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–µ json, —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        self.text = response['object']['message']['text'].split()
        if(re.match(rf"\[(club|public){vk_info['groupid']}\|(@|\*){scrname}\]", self.text[0])):
            del(self.text[0])
        cmd = self.text[0].lower()
        del(self.text[0])
        if(cmds.get(cmd) == None):
            if(cmd[0] == '/' and self.is_chat == False):
                Vk.send(self.from_chat, "üëéüèª –ù–µ –ø–æ–Ω—è–ª")
            return None
        try:
            cmds[cmd](self)
        except Exception as e:
            Vk.send(self.from_chat, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @l27001")
            raise e

    def info(self):
        """"""
        if(self.is_chat == True):
            if(self.chat_sub['subscribe'] == 1):
                rass_ch = f"Chat-ID: {self.from_chat}\n–ü–æ–¥–ø–∏—Å–∫–∞ —á–∞—Ç–∞: –ê–∫—Ç–∏–≤–Ω–∞\n"
            else:
                rass_ch = f"Chat-ID: {self.from_chat}\n–ü–æ–¥–ø–∏—Å–∫–∞ —á–∞—Ç–∞: –ù–µ–∞–∫—Ç–∏–≤–Ω–∞\n"
        else: rass_ch = ""
        if(self.user_sub['subscribe'] == 1):
            rass = "–ê–∫—Ç–∏–≤–Ω–∞"
        else: rass = "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        if(self.user_sub['dostup'] == 0): dostup = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif(self.user_sub['dostup'] == 1): dostup = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        else: dostup = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        txt = f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\nID: {self.from_user}\n–î–æ—Å—Ç—É–ø: {dostup}\n–ü–æ–¥–ø–∏—Å–∫–∞: {rass}\n{rass_ch}"
        keyb = Vk.construct_keyboard(b1=Vk.make_button(color="secondary", label="/—Å—Ç–∞—Ç—É—Å"), b2=Vk.make_button(color="primary", label="/—Ä–∞—Å—Å—ã–ª–∫–∞"))
        Vk.send(self.from_chat, txt, keyboard=keyb, disable_mentions=1)

    def test(self):
        """"""
        Vk.send(self.from_chat, f"{scrname} Bot by @l27001", disable_mentions=1)

    def clrkeyb(self):
        """"""
        Vk.send(self.from_chat, "Clear keyboard", keyboard='{"buttons":[]}')

    def rass(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞/–û—Ç–ø–∏—Å–∫–∞ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö"""
        if(self.is_chat == False):
            if(self.user_sub['subscribe'] == 0):
                Vk.send(self.from_chat,"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã", keyboard=Vk.construct_keyboard(b1=Vk.make_button(type_="intent_subscribe",peer_id=self.from_user,intent="non_promo_newsletter",label="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),inline=self.inline))
            else:
                Vk.send(self.from_chat,"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã", keyboard=Vk.construct_keyboard(b2=Vk.make_button(type_="intent_unsubscribe",peer_id=self.from_user,intent="non_promo_newsletter",label="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è"),inline=self.inline))
        else:
            if(self.chat_sub['subscribe'] == 0):
                Mysql.query("UPDATE vk_subscribe SET subscribe = 1 WHERE id = %s", (self.from_chat,))
                Vk.send(self.from_chat,"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏ –±–µ—Å–µ–¥—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–∏—á–Ω–æ –≤–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°.")
            else:
                Mysql.query("UPDATE vk_subscribe SET subscribe = 0 WHERE id = %s", (self.from_chat,))
                Vk.send(self.from_chat,"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏ –±–µ—Å–µ–¥—É –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ª–∏—á–Ω–æ –≤–∞–º –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –õ–°.")

    def help(self):
        """–ü–æ–º–æ—â—å"""
        cmd_list = []
        pred = None
        for i,n in cmds.items():
            if(n == pred):
                continue
            pred = n
            if(n.__doc__ == None or n.__doc__ == ''):
                continue
            else:
                doc = n.__doc__
            cmd_list.append(f"{i} - {doc}")
        cmd_list = "\n".join(cmd_list)
        Vk.send(self.from_chat, cmd_list)

    def status(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏"""
        Vk.send(self.from_chat, check_stream())

    def dsbot(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä –¥–∏—Å–∫–æ—Ä–¥"""
        Vk.send(self.from_chat, "https://d0m1tori.ezdomain.ru/ds-notify/add")

cmds = {'/info':Commands.info, '/–∏–Ω—Ñ–æ':Commands.info, 
        '/test':Commands.test, '/—Ç–µ—Å—Ç':Commands.test, 
        '/—Ä–∞—Å—Å—ã–ª–∫–∞':Commands.rass, '/–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':Commands.rass, '/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è':Commands.rass,
        '/help':Commands.help, '/–ø–æ–º–æ—â—å':Commands.help, 
        '/akey':Commands.clrkeyb,
        '/status':Commands.status, '/—Å—Ç–∞—Ç—É—Å':Commands.status,
        '/–¥—Å–±–æ—Ç':Commands.dsbot, '/dsbot':Commands.dsbot
}
